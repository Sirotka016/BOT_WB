import asyncio
import os
from dataclasses import dataclass

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
)
from dotenv import load_dotenv
from loguru import logger

# ---------------------- settings ----------------------
load_dotenv()


@dataclass(frozen=True)
class Settings:
    bot_token: str = os.getenv("BOT_TOKEN", "")


settings = Settings()
if not settings.bot_token:
    raise RuntimeError("BOT_TOKEN is empty. Put it into .env")


# ---------------------- ui helpers ----------------------
def kb_home() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="auth"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"),
            ],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]
    )


def kb_auth() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="home"),
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"),
            ]
        ]
    )


def home_text(user_name: str) -> str:
    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –¢–ó
    return (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}.\n"
        f"–Ø –±–æ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫ Football Shop ü§ñ!\n"
        f"–ù–∞ WB —è —É–º–µ—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏, –∏—Å–∫–∞—Ç—å —Å–ª–æ—Ç—ã –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã.\n"
        f"–ê —Ç–∞–∫ –∂–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫–∏ —Å –≤–∞—à–∏–º —Ç–æ–≤–∞—Ä–æ–º –∑–∞ –≤–∞—Å!"
    )


def auth_stub_text() -> str:
    # –¢–µ–∫—Å—Ç –∑–∞–≥–ª—É—à–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ
    return (
        "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω\n"
        "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞\n"
        "____________________________\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79181234567, "
        "–∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª WB –ü–∞—Ä—Ç–Ω–µ—Ä—ã"
    )


# ---------------------- bot init ----------------------
bot = Bot(token=settings.bot_token)
dp = Dispatcher()


# ---------------------- commands & handlers ----------------------
@dp.message(CommandStart())
async def on_start(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ '–æ–∫–Ω–æ' —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    user_name = message.from_user.full_name if message.from_user else "–¥—Ä—É–≥"
    await message.answer(home_text(user_name), reply_markup=kb_home())


@dp.callback_query(F.data == "refresh")
async def on_refresh(cb: CallbackQuery):
    """
    '–û–±–Ω–æ–≤–∏—Ç—å' ‚Äî –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç—Ç–æ –∂–µ –æ–∫–Ω–æ (–æ–¥–Ω–æ –æ–∫–Ω–æ, –±–µ–∑ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).
    """
    user_name = cb.from_user.full_name if cb.from_user else "–¥—Ä—É–≥"
    try:
        await cb.message.edit_text(home_text(user_name), reply_markup=kb_home())
    except Exception as e:
        logger.warning(f"edit_text failed on refresh: {e}")
        # fallback: –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–≤–µ—á–∞–µ–º –Ω–æ–≤—ã–º
        await cb.message.answer(home_text(user_name), reply_markup=kb_home())
    await cb.answer()


@dp.callback_query(F.data == "auth")
async def on_auth(cb: CallbackQuery):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ–º '–æ–∫–Ω–æ' –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞) ‚Äî —Å—Ç—Ä–æ–≥–æ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    """
    try:
        await cb.message.edit_text(auth_stub_text(), reply_markup=kb_auth())
    except Exception as e:
        logger.warning(f"edit_text failed on auth: {e}")
        await cb.message.answer(auth_stub_text(), reply_markup=kb_auth())
    await cb.answer()


@dp.callback_query(F.data == "home")
async def on_home(cb: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ '–î–æ–º–æ–π' —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
    """
    user_name = cb.from_user.full_name if cb.from_user else "–¥—Ä—É–≥"
    try:
        await cb.message.edit_text(home_text(user_name), reply_markup=kb_home())
    except Exception as e:
        logger.warning(f"edit_text failed on home: {e}")
        await cb.message.answer(home_text(user_name), reply_markup=kb_home())
    await cb.answer()


@dp.callback_query(F.data == "close")
async def on_close(cb: CallbackQuery):
    """
    –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞: –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    try:
        await cb.message.edit_text(
            "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.", reply_markup=None
        )
    except Exception as e:
        logger.warning(f"edit_text failed on close: {e}")
        await cb.message.answer("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.")
    await cb.answer()


async def setup_commands():
    await bot.set_my_commands([BotCommand(command="start", description="Start")])


async def main():
    logger.info("Starting BOT_WB‚Ä¶")
    await setup_commands()
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Stopped.")
